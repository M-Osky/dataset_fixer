#!/bin/bash 

#dataset_fixer_v2.sh

# This script will launch a series of perl scripts that will check the structure file from "Populations".
# First will trim the samples that are empty (more than 85% of missing values by deffault).
# Then will delete loci with more than 30% of missing values
# Then will check and delete if there is still any sample with over 30% of missing
# If after purging samples, any of the loci is monomorphic, it will be deleted.
# Then it will transform the structure.str file to genepop through PGDSpider to build the genotypes.
# Will input the most frequent genotype of the population in any missing genotype
# Finally will give back an structure and Arlequin input file

#The Launcher has some options, and the perl modules are somehow costumizable, but still may fail if the input file is not like described:
# A Structure file with one row with loci names, a column with sample names, a column with populations, and then the alleles
# Does not matter if there is any extra rows commented out (starting with "#") they will be ignored

#Thinks I need to implement:
	#	Spider changes the population names by numbers  
	#	It could extract a poplist or sort the populations acording to a poplist
	#	Work in remote folders so we can implement it in the populations submission file
	#	flags

###########################################################################################################################
#######                                                                                                          ##########
#######         CHANGE LOG                                                                                       ##########
#######    2018-12-14  -  Version 2                                                                              ##########
#######     Implemented to run it remotely: from a directory that is not the actual local working directory      ##########
#######     Now it can be run automatically from the submission files after refmap + populations                 ##########
#######                                                                                                          ##########
###########################################################################################################################



###### PARAMETERS

INPUT1="populations.structure"		#Input file as generated by Populations (Stacks)
DELETESAMPLES=0.85		#If the ratio of missing is above this value the samples we will deleted
INPUTMISS=0.3		#If the ratio of missing is below  this value in despite of deleting loci, the most frequen genotype (per population) will be input
POPLENGTH=2		#The populations will be named acording to the first POPLENGTH characters of the sample names
DELETE="no"		#Delete the temporary files after finishing? Any other option than "yes" will keep them at a "temp" folder.
INPUT="yes"		#Once there is only a few missing (<INPUTMISS) do you want to replace by (input) the most common genotype of the same population?
#INPUT="no"

#################################################################################################################################################################
#Those options are not yet implemented in this launcher, which means that if you change the default values here you need to change them also in the perl modules
HEADERS="yes"		#The input file includes a first row with headers (commented lines "#" will be ignored)
METADATA=2		#How many columns with no alleles are at the left of the file (usually 2 = sample names and populations)


#Before proceeding check in which directory is PGDSpider installed and the names of Spider configuration files (.spid) from the same directory.
#Also, don't forget to add the PATH for the perl modules in PATH and PERL LIBRARIES

PROGRAMPATH=/shared/astambuk/software/spider/
PROGRAMNAME=PGDSpider2-cli.jar

PARAMNAME1="struct-to-genepop.spid"
PARAMNAME2="genepopSNP-to-structure.spid"
PARAMNAME3="structure-arlequin.spid"
PARAMNAME4="structure-bayescan.spid"


############################


SPIDER="$PROGRAMPATH$PROGRAMNAME"
PARAM1="$PROGRAMPATH$PARAMNAME1"
PARAM2="$PROGRAMPATH$PARAMNAME2"
PARAM3="$PROGRAMPATH$PARAMNAME3"
PARAM4="$PROGRAMPATH$PARAMNAME4"


INTEG='^[0-9]+$'



##############################

#Save the directory at which files are to save the log file


if [[ -n "$2" ]] && [[ ! $2 =~ $INTEG ]]
then
	MYDIR=$(dirname $2)
elif [[ -n "$1" ]] && [[ ! $1 =~ $INTEG ]]
then 
	MYDIR=$(dirname $1)
else
	MYDIR="."
fi

LOGPATH="$MYDIR/dataset_fixer.log"

{

#Check the command line arguments

# If first is a text string (inputfile) and second a number (poplength)
if [[ -n "$2" ]] && [[ $2 =~ $INTEG ]] && [[ ! $1 =~ $INTEG ]]
then
	POPLENGTH=$2
	INPUT1=$1
	FILENAME=$(basename $1)
	printf "\n\n\tRunning   dataset_fixer\nTwo arguments passed: Input file name ($1) and population name length ($2).\nPopulation names will be extracted from the first $POPLENGTH characters of each sample name from file \"$INPUT1\"\n"
# If second is a text string (inputfile) and first a number (poplength)
	elif [[ -n "$2" ]] && [[ $1 =~ $INTEG ]] && [[ ! $2 =~ $INTEG ]]
then
	POPLENGTH=$1
	INPUT1=$2
	FILENAME=$(basename $2)
	printf "\n\n\tRunning   dataset_fixer\nTwo arguments passed: Population name length ($1) and input file name ($2).\nPopulation names will be extracted from the first $POPLENGTH characters of each sample name from file \"$INPUT1\"\n"
# If both are numeric or both text strings: Error
elif [[ -n "$2" ]]
then
	printf "\n\nERROR! There is some kind of error with the command line options.\nTwo arguments passed from command line. Can not be both numerical, neither both strings.\n\n"
	printf "   To check dataset_fixer_v2 help information launch:\n\n\tdataset_fixer_v2.sh help\n\tdataset_fixer_v2.sh --h\n\n    or any similar help call command\n\n"
	exit 1
# If no arguments were passed from command line (use defaults)
elif [ -z "$1" ]
then
	printf "\n\n\tRunning   dataset_fixer\nNo arguments passed, using default values: Population names will be extracted from the first $POPLENGTH characters of each sample name from file \"$INPUT1\"\n"
	FILENAME=$INPUT1
# If one argument was passed from command line (not two) asking for help
elif [ $1 == "help"  -o  $1 == "-help"  -o  $1 == "--help"  -o  $1 == "-h"  -o  $1 == "--h" ]
then
	printf "\n\n   dataset fixer  help information\n\nThis script will launch a series of perl scripts that will check an Structure-like input file. ideally the   populations.structure   file from \"Populations\" (Stacks)\n- First:  delete_bad_samples  Will trim the samples that are almost-empty (more than $DELETESAMPLES of missing values by default).\n- Then:      delete_bad_loci  Will delete loci with high rate of missing values (by default with more than $INPUTMISS of missing values).\n- Then:   delete_bad_samples  Will again check and delete if there is still any sample with high number of missing (now for samples over $INPUTMISS of missing, by default).\n- Afterwards:    monomorphic  Will check if after purging samples, any of the loci is monomorphic, if so it will be deleted.\n- After this:     PGD Spider  Will transform the structure.str file to genepop to build the genotypes.\n- Next      missing_replacer  Will check the samples per population and ignore any population with 3 or less samples.\n                              will input the most frequent genotype of the population in any missing genotype\n- Following that  PGD Spider  Will give back various input file formats for Arlequin, Structure, and BayesScan.\n- And finally:   the script   will check that the files are alright.\n\n"
	printf "\nUSAGE:\nIf you just call the script (  dataset_fixer_v2.sh  ) it will execute the above process with the default options:\n  It will read the file   $INPUT1   in the working directory\n  The name of the populations will be read from the first $POPLENGTH characters of each sample name (by default in the first column of Structure input files).\n\nYou may input any population name length (numerical) or/and any other input file name (string) as optional arguments from command line:\n  \tdataset_fixer_v2.sh  4  \t\t\t\t    (for sample names as: ACAB042  ->  Pop: ACAB,  Individual: ACAB042)\n  \tdataset_fixer_v2.sh  3  \t\t\t\t    (for sample names as PGa42  ->  Pop: PGa; Individual: PGa42)\n  \tdataset_fixer_v2.sh  results/try1/rawdata.str  \t\t    (different input file and directory than default)\n  \tdataset_fixer_v2.sh  3  sub_dataset/populations.structure   (different population name length and input file name in a different location)\n  \tdataset_fixer_v2.sh  clean_data_out  4\t\t\t    (different population name length and different input file name than default)\n\nMost of the other default options, settings and values can be changed in the first few lines of the script.\nInput file does not need to be in the actual local working directory, just specify the path with the inputfile name.\nThe perl modules are somehow costumizable if your input file structure, sample names, or population names are not as in the example above.\nThe script may fail if the input file is not like described:\nStructure file a first row with loci names, a first column with sample names, a second column with population names, and then the alleles.\nDoes not matter if there is any extra rows commented out (starting with \"#\") as they will be ignored\n\nExtra options:\nLog files will be produced for all the process, you can decide if you want to delete the temporary files generated in the process (by default: $DELETE)\nYou can decide if you want to input the most common genotype of the population for each missing value or not (by default: $INPUT)\nSome of the perl modules have their own help files and options in case their fail.\n\n"
	exit 0
# If one argument was passed from command line (not two) and is numeric (poplength)
elif [[ $1 =~ $INTEG ]]
then
	POPLENGTH=$1 
	printf "\n\n\tRunning   dataset_fixer\nOne argument passed: Population name length. Population names will be extracted from the first $POPLENGTH characters of each sample name from the default input file \"$INPUT1\"\n"
# If one argument was passed from command line (not two) and is not numeric (inputfile)
elif ! [[ $1 =~ $INTEG ]]
then
	INPUT1=$1
	FILENAME=$(basename $1)
	printf "\n\n\tRunning   dataset_fixer\nOne argument passed: Input file name. Will analyse file \"$INPUT1\" and extract the default number of characters ($POPLENGTH) from each sample name to define population names\n\n"
# If any of the conditions are met: Error
else
	printf "\n\nERROR! There is some kind of error with the command line options\n\n"
	printf "\n   To check dataset_fixer_v2 help information launch:\n\tdataset_fixer_v2.sh help\n\tdataset_fixer_v2.sh --h\n  or any similar help call command\n\n"
	exit 1
fi

# If the file (either default or passed from command line) is not found: Error
file=$INPUT1
if [ ! -f "$file" ]
then
	printf "\n"
	echo "$0: File '${file}' not found."
	printf "The file name passed does not exist in the working directory\n\n"
	exit 1
fi




########### FOLDER AND FILES LOCATION

TEMPFOLDER="temp/"
SUFIX1="_clean"
INPUT2="$INPUT1$SUFIX1"
SUFIX2="_neat"
INPUT3="$TEMPFOLDER$INPUT1$SUFIX2"
INPUT4="$INPUT3$SUFIX1"
SUFIX3="_better"
INPUT5="$MYDIR/$TEMPFOLDER$FILENAME$SUFIX3"
SUFIX4=".genepop"
INPUT6="$MYDIR/$TEMPFOLDER$FILENAME$SUFIX4"
SUFIX5="_fixed"
INPUT7="$INPUT6$SUFIX5"
INPUT8="$MYDIR/$TEMPFOLDER$FILENAME$SUFIX5"
SUFIX6="_FINAL"
OUTPUT="$MYDIR/$FILENAME$SUFIX6"
OUTPUTARP="$OUTPUT.arp"
OUTPUTBAY="$OUTPUT.bayescan"








########## NOW STARTS THE PIPELINE



printf "\n\nDeleting empty samples: delete_bad_samples_v3.pl $DELETESAMPLES $INPUT1\n\n"
delete_bad_samples_v3.pl $DELETESAMPLES $INPUT1

printf "\n\n\n##########\n\n\nDeleting bad loci: delete_bad_loci_v2.pl $INPUT2 $INPUTMISS\n\n"
delete_bad_loci_v2.pl $INPUT2 $INPUTMISS

printf "\n\n\n##########\n\n\nDeleting the rest of bad samples: delete_bad_samples_v3.0.pl $INPUTMISS $INPUT3\n\n"
delete_bad_samples_v3.0.pl $INPUTMISS $INPUT3

printf "\n\n\n##########\n\n\nDeleting no biallelic loci: monomorphic_v2.pl\n\n"
monomorphic_v2.pl $INPUT4

if [ $INPUT == "yes" ]
then
	printf "\n\n\n##########\n\n\nTransforming to genepop with PGDSpider to build genotypes\n\n"
	java -Xmx10240m -Xms512m -jar $SPIDER -inputfile $INPUT5 -inputformat STRUCTURE -outputfile $INPUT6 -outputformat GENEPOP -spid $PARAM1
	#java -Xmx10240m -Xms512m -jar /home/omiraper/software/spider/PGDSpider2-cli.jar -inputfile /shared/omiraper/inputfiles/fixer/trial/temp/populations.structure_better -inputformat STRUCTURE -outputfile /shared/omiraper/inputfiles/fixer/trial/temp/populations.structure.genepop -outputformat GENEPOP -spid /home/omiraper/software/spider/struct-to-genepop.spid


	printf "\nSpider is done.\n\n\n##########\n\n\nInputing most comon genotype in missing: missing_replacer_v2.pl $INPUT6 $POPLENGTH\n\n"
	missing_replacer_v2.pl $INPUT6 $POPLENGTH

	printf "\n\n\n##########\n\n\nTransforming back to Structure with PGDSpider\n\n"
	java -Xmx10240m -Xms512m -jar $SPIDER -inputfile $INPUT7 -inputformat GENEPOP -outputfile $INPUT8 -outputformat STRUCTURE -spid $PARAM2
	#java -Xmx10240m -Xms512m -jar /home/omiraper/software/spider/PGDSpider2-cli.jar -inputfile /shared/omiraper/inputfiles/fixer/trial/temp/populations.structure.genepop_final -inputformat GENEPOP -outputfile /shared/omiraper/inputfiles/fixer/trial/populations.structure_final.str -outputformat STRUCTURE -spid /home/omiraper/software/spider/genepopSNP-to-structure.spid
	printf "\nSpider is done\n\n############\n\n"
elif [ $INPUT == "no" ] 
then
	printf "\n\n###########\n\n\nMissing values will not be replaced: \$INPUT = $INPUT\n\n"
	INPUT8=$INPUT5
else
	printf "\n\nError!  Variable \$INPUT should be either \"yes\" or \"no\": \$INPUT = $INPUT\n"
fi

printf "Making sure that all the final files are nice and tidy\n\n############\n"

printf "Checking $INPUT8...\n"
sed -i 's/ /\t/g' $INPUT8
sed -i 's/\t00/\t/g' $INPUT8
printf "Transforming to Arlequin...\n"
cp $INPUT8 $OUTPUT.str
java -Xmx10240m -Xms512m -jar $SPIDER -inputfile $OUTPUT.str -inputformat STRUCTURE -outputfile $OUTPUTARP -outputformat ARLEQUIN -spid $PARAM3
printf "\nTransforming to Bayescan...\n"
java -Xmx10240m -Xms512m -jar $SPIDER -inputfile $OUTPUT.str -inputformat STRUCTURE -outputfile $OUTPUTBAY -outputformat GESTE_BAYE_SCAN -spid $PARAM4


if [ $DELETE == "yes" ]
then
	printf "\nDeleting temporary files\n\n"
	rm -r temp
else
	printf "\nKeeping temporary files (for debuging purposes) at $TEMPFOLDER\n\n"
fi

printf "\ndataset_fixer finished sucesfully (fingers crossed) the log files for each module were saved at the working directory.\nSaving dataset_fixer run log file at $LOGPATH\n\n\tDONE!\n\n"

} | tee "$LOGPATH"


